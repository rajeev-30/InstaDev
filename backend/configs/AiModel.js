import dotenv from "dotenv";
import  {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
}  from "@google/generative-ai";
// const fs = require("node:fs");
// const mime = require("mime-types");

dotenv.config({
    path: "./.env"
})

const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.5-pro-exp-03-25",
});

const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "text/plain",
};

const codeGenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "application/json",
};


export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
});

export const GenAiCode = model.startChat({
    generationConfig: codeGenerationConfig,
    history: [
        {
            role: "user",
            parts: [
                {text: "Generate todo app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema, and make sure you generate App.js, index.js, style.css in root directory and index.html in public directory:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere's the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema, and make sure you generate App.js, index.js, style.css in root directory and index.html in public directory::\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n"},
            ],
        },
        {
            role: "model",
            parts: [
                {text: "The user wants a React project structure for a To-Do App.\n\n**Requirements:**\n\n1.  **Project Type:** React using Vite.\n2.  **Styling:** Tailwind CSS.\n3.  **Dependencies:**\n    *   Only `lucide-react` for icons (specific list provided).\n    *   No other third-party UI libraries unless explicitly asked.\n    *   No `date-fns`, `react-chartjs-2`, `firebase`, `@google/generative-ai` unless explicitly asked (and they are not needed for a basic Todo app).\n4.  **Component Structure:** Multiple components organized in separate folders.\n5.  **File Extensions:** `.js` for components.\n6.  **Output Format:** JSON with `projectTitle`, `explanation`, `files` (code included), and `generatedFiles` (list of filenames).\n7.  **Core Files:** Generate `/App.js`, `/src/main.jsx` (Vite entry point), `/index.css` (Tailwind setup), `/public/index.html`. Note: User prompt mentioned `index.js` and `style.css` in root, but Vite uses `src/main.jsx` and `index.css` typically. I will stick to the standard Vite structure for clarity and functionality, but name the CSS file `index.css` as requested (even though `style.css` was mentioned too, `index.css` is more standard for Vite).\n8.  **Icons:** Use `lucide-react` where appropriate.\n9.  **Placeholders/Images:** Use the provided archive.org link or Unsplash URLs.\n10. **Emojis:** Use where appropriate for UX.\n11. **Design:** Beautiful, production-worthy, not cookie-cutter.\n12. **Functionality:** A basic To-Do application (Add, View, Mark as Complete, Delete).\n13. **Explanation:** Concise paragraph explaining structure, purpose, and functionality.\n\n**Plan:**\n\n1.  **Project Title:** \"React To-Do App\"\n2.  **Explanation:** Describe the basic CRUD operations of the To-Do app, the component structure, and the use of React Hooks, Tailwind CSS, and Lucide icons.\n3.  **File Structure:**\n    *   `/public/index.html`: Basic HTML structure for Vite.\n    *   `/index.css`: Tailwind CSS directives.\n    *   `/src/main.jsx`: Vite entry point, renders `App`.\n    *   `/App.js`: Main application component, manages To-Do state and renders UI components.\n    *   `/src/components/Header.jsx`: Simple header component.\n    *   `/src/components/TodoList.jsx`: Displays the list of To-Do items.\n    *   `/src/components/TodoItem.jsx`: Represents a single To-Do item with edit, delete, and complete actions.\n    *   `/src/components/AddTodoForm.jsx`: Form to add new To-Do items.\n    *   `/src/hooks/useLocalStorage.js`: Custom hook to persist To-Do items in local storage (optional but good practice).\n4.  **Component Implementation:**\n    *   `App.js`: Use `useState` to manage the `todos` array. Implement functions to add, delete, toggle completion, and potentially edit todos. Use `useLocalStorage` hook.\n    *   `Header.jsx`: Simple title and maybe a relevant icon.\n    *   `AddTodoForm.jsx`: Input field and a button (`Plus` icon) to add todos. Manage input state.\n    *   `TodoList.jsx`: Map over the `todos` array and render `TodoItem` for each.\n    *   `TodoItem.jsx`: Display the todo text. Add buttons (`Check`, `Edit`, `Trash` icons) for actions. Conditionally apply styles for completed items (e.g., line-through).\n    *   `useLocalStorage.js`: Implement a hook that syncs state with `localStorage`.\n5.  **Styling:** Use Tailwind CSS classes extensively for layout, typography, colors, spacing, etc. Aim for a clean, modern look.\n6.  **Icons:** Use `Plus`, `Check`, `Trash`, `Edit` from `lucide-react`. Maybe a `ListChecks` or similar for the header. Let's use `Check` and `X` for toggling, `Trash` for deleting, and `Plus` for adding. `Edit` can be added later if needed for simplicity now.\n7.  **JSON Output:** Structure the generated code and filenames according to the specified JSON schema.\n\n**Refinement:**\n\n*   Vite uses `.jsx` by default for files containing JSX. Although the prompt requested `.js`, using `.jsx` is the standard and recommended practice with Vite/React. I will use `.jsx` for components containing JSX (`App.js`, `Header.jsx`, `TodoList.jsx`, `TodoItem.jsx`, `AddTodoForm.jsx`, `main.jsx`) and `.js` for plain JavaScript files like the custom hook (`useLocalStorage.js`). I'll need to adjust the prompt's `.js` requirement slightly for correctness or generate `.js` files but note the potential incompatibility if JSX isn't configured properly for `.js` files in Vite (though default Vite often handles it). Let's stick to `.jsx` for React components as it's the standard. I'll update the explanation and generated files list accordingly.\n*   The prompt requests `index.js` and `style.css` in the root. For a Vite project, the entry point is typically `src/main.jsx` and the main CSS is often `src/index.css` or just `index.css` in the root, imported into `main.jsx`. I'll place `index.css` in the root and `main.jsx` in `src` as per Vite standards. I will create `App.js` in the root as requested.\n*   I will skip the `Edit` functionality initially to keep the example focused but maintainable.\n*   I will use the `useLocalStorage` hook to make the app state persistent.\n\nLet's start generating the file contents."},
                {text: "```json\n{\n  \"projectTitle\": \"React To-Do App with Tailwind CSS\",\n  \"explanation\": \"This project is a functional To-Do application built with React and Vite. It allows users to add, view, mark tasks as complete/incomplete, and delete tasks. The application state (the list of To-Dos) is managed using React Hooks (`useState`, `useEffect`) and persisted in the browser's local storage via a custom hook (`useLocalStorage`). Components are organized into specific folders for better maintainability (`src/components`, `src/hooks`). Styling is handled exclusively by Tailwind CSS, providing a clean and modern user interface, enhanced with icons from the `lucide-react` library.\",\n  \"files\": {\n    \"/public/index.html\": {\n      \"code\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"UTF-8\\\" />\\n    <link rel=\\\"icon\\\" type=\\\"image/svg+xml\\\" href=\\\"/vite.svg\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n    <title>React To-Do App</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n    <script type=\\\"module\\\" src=\\\"/src/main.jsx\\\"></script>\\n  </body>\\n</html>\\n\"\n    },\n    \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\\n\\nbody {\\n  @apply bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen font-sans;\\n}\\n\"\n    },\n    \"/tailwind.config.js\": {\n      \"code\": \"/** @type {import('tailwindcss').Config} */\\nexport default {\\n  content: [\\n    \\\"./index.html\\\",\\n    \\\"./src/**/*.{js,ts,jsx,tsx}\\\",\\n    \\\"./App.js\\\" \\n  ],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\\n\"\n    },\n    \"/postcss.config.js\": {\n      \"code\": \"export default {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\\n\"\n    },\n    \"/vite.config.js\": {\n      \"code\": \"import { defineConfig } from 'vite'\\nimport react from '@vitejs/plugin-react'\\n\\n// https://vitejs.dev/config/\\nexport default defineConfig({\\n  plugins: [react()],\\n})\\n\"\n    },\n    \"/package.json\": {\n      \"code\": \"{\\n  \\\"name\\\": \\\"react-todo-app\\\",\\n  \\\"private\\\": true,\\n  \\\"version\\\": \\\"0.0.0\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"vite\\\",\\n    \\\"build\\\": \\\"vite build\\\",\\n    \\\"lint\\\": \\\"eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0\\\",\\n    \\\"preview\\\": \\\"vite preview\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"lucide-react\\\": \\\"^0.378.0\\\", \\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/react\\\": \\\"^18.2.66\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.22\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.2.1\\\",\\n    \\\"autoprefixer\\\": \\\"^10.4.19\\\",\\n    \\\"eslint\\\": \\\"^8.57.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.34.1\\\",\\n    \\\"eslint-plugin-react-hooks\\\": \\\"^4.6.0\\\",\\n    \\\"eslint-plugin-react-refresh\\\": \\\"^0.4.6\\\",\\n    \\\"postcss\\\": \\\"^8.4.38\\\",\\n    \\\"tailwindcss\\\": \\\"^3.4.3\\\",\\n    \\\"vite\\\": \\\"^5.2.0\\\"\\n  }\\n}\\n\"\n    },\n     \"/App.js\": {\n      \"code\": \"import React, { useState, useCallback } from 'react';\\nimport Header from './src/components/Header';\\nimport AddTodoForm from './src/components/AddTodoForm';\\nimport TodoList from './src/components/TodoList';\\nimport useLocalStorage from './src/hooks/useLocalStorage';\\nimport './index.css';\\n\\nfunction App() {\\n  const [todos, setTodos] = useLocalStorage('todos', []);\\n  const [filter, setFilter] = useState('all'); // 'all', 'active', 'completed'\\n\\n  const addTodo = useCallback((text) => {\\n    const newTodo = {\\n      id: Date.now(),\\n      text: text,\\n      completed: false,\\n    };\\n    setTodos(prevTodos => [...prevTodos, newTodo]);\\n  }, [setTodos]);\\n\\n  const toggleTodo = useCallback((id) => {\\n    setTodos(prevTodos =>\\n      prevTodos.map(todo =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  }, [setTodos]);\\n\\n  const deleteTodo = useCallback((id) => {\\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id));\\n  }, [setTodos]);\\n\\n  const filteredTodos = todos.filter(todo => {\\n    if (filter === 'active') return !todo.completed;\\n    if (filter === 'completed') return todo.completed;\\n    return true; // 'all'\\n  });\\n\\n  return (\\n    <div className=\\\"min-h-screen flex flex-col items-center pt-10 sm:pt-16 bg-gradient-to-br from-blue-50 to-indigo-100\\\">\\n      <div className=\\\"w-full max-w-md bg-white rounded-xl shadow-lg p-6 \\\">\\n        <Header />\\n        <AddTodoForm onAddTodo={addTodo} />\\n        \\n        <div className=\\\"mt-6 mb-4 flex justify-center space-x-2 border-b pb-3\\\">\\n          <button \\n            onClick={() => setFilter('all')}\\n            className={`px-3 py-1 rounded-md text-sm font-medium ${filter === 'all' ? 'bg-indigo-100 text-indigo-700' : 'text-gray-500 hover:bg-gray-100'}`}>\\n            All\\n          </button>\\n          <button \\n            onClick={() => setFilter('active')}\\n            className={`px-3 py-1 rounded-md text-sm font-medium ${filter === 'active' ? 'bg-indigo-100 text-indigo-700' : 'text-gray-500 hover:bg-gray-100'}`}>\\n            Active ✅\\n          </button>\\n          <button \\n            onClick={() => setFilter('completed')}\\n            className={`px-3 py-1 rounded-md text-sm font-medium ${filter === 'completed' ? 'bg-indigo-100 text-indigo-700' : 'text-gray-500 hover:bg-gray-100'}`}>\\n            Completed 🎉\\n          </button>\\n        </div>\\n\\n        <TodoList \\n          todos={filteredTodos} \\n          onToggleTodo={toggleTodo} \\n          onDeleteTodo={deleteTodo} \\n        />\\n\\n        {todos.length > 0 && (\\n           <p className=\\\"text-center text-xs text-gray-400 mt-6\\\">\\n             {`${todos.filter(t => !t.completed).length} items left`}\\n           </p>\\n        )}\\n      </div>\\n       <footer className=\\\"mt-8 text-center text-gray-500 text-xs\\\">\\n          Created with React & Tailwind CSS ✨\\n       </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\"\n    },\n    \"/src/main.jsx\": {\n      \"code\": \"import React from 'react'\\nimport ReactDOM from 'react-dom/client'\\nimport App from '../App.js' // Adjust path relative to src\\nimport '../index.css' // Adjust path relative to src\\n\\nReactDOM.createRoot(document.getElementById('root')).render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>,\\n)\\n\"\n    },\n    \"/src/components/Header.jsx\": {\n      \"code\": \"import React from 'react';\\nimport { Check } from 'lucide-react'; // Using Check as a simple logo element\\n\\nfunction Header() {\\n  return (\\n    <div className=\\\"flex items-center justify-center mb-6 pb-4 border-b border-gray-200\\\">\\n        <Check size={28} className=\\\"text-indigo-600 mr-2\\\" strokeWidth={3}/>\\n        <h1 className=\\\"text-3xl font-bold text-gray-800\\\">\\n            My To-Do List <span role=\\\"img\\\" aria-label=\\\"sparkles\\\">✨</span>\\n        </h1>\\n    </div>\\n\\n  );\\n}\\n\\nexport default Header;\\n\"\n    },\n    \"/src/components/AddTodoForm.jsx\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction AddTodoForm({ onAddTodo }) {\\n  const [inputText, setInputText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (inputText.trim()) {\\n      onAddTodo(inputText.trim());\\n      setInputText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex space-x-2 mb-6\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={inputText}\\n        onChange={(e) => setInputText(e.target.value)}\\n        placeholder=\\\"What needs to be done? 🤔\\\"\\n        className=\\\"flex-grow px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200\\\"\\n      />\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-200 flex items-center disabled:opacity-50\\\"\\n        disabled={!inputText.trim()}\\n      >\\n        <Plus size={20} className=\\\"mr-1\\\"/> Add\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default AddTodoForm;\\n\"\n    },\n    \"/src/components/TodoList.jsx\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem';\\n\\nfunction TodoList({ todos, onToggleTodo, onDeleteTodo }) {\\n  if (todos.length === 0) {\\n    return <p className=\\\"text-center text-gray-500 italic mt-6\\\">No tasks yet! Add one above. 🎉</p>;\\n  }\\n\\n  return (\\n    <ul className=\\\"space-y-3\\\">\\n      {todos.map(todo => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          onToggleTodo={onToggleTodo}\\n          onDeleteTodo={onDeleteTodo}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TodoList;\\n\"\n    },\n    \"/src/components/TodoItem.jsx\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Check, X } from 'lucide-react';\\n\\nfunction TodoItem({ todo, onToggleTodo, onDeleteTodo }) {\\n  return (\\n    <li className={`flex items-center justify-between p-3 rounded-lg transition duration-200 ${todo.completed ? 'bg-green-50' : 'bg-gray-50 hover:bg-gray-100'}`}>\\n      <div className=\\\"flex items-center flex-grow mr-3\\\">\\n        <button\\n          onClick={() => onToggleTodo(todo.id)}\\n          className={`mr-3 p-1 rounded-full border transition duration-200 ${todo.completed ? 'bg-green-500 border-green-500 hover:bg-green-600' : 'border-gray-300 hover:bg-gray-200'}`}\\n          aria-label={todo.completed ? 'Mark as incomplete' : 'Mark as complete'}\\n        >\\n          {todo.completed ? <Check size={16} className=\\\"text-white\\\" /> : <div className=\\\"w-4 h-4\\\"></div>}\\n        </button>\\n        <span className={`flex-grow text-gray-700 ${todo.completed ? 'line-through text-gray-400' : ''}`}>\\n          {todo.text}\\n        </span>\\n      </div>\\n      <button\\n        onClick={() => onDeleteTodo(todo.id)}\\n        className=\\\"text-red-500 hover:text-red-700 transition duration-200 ml-2 p-1 rounded hover:bg-red-100\\\"\\n        aria-label=\\\"Delete task\\\"\\n      >\\n        <Trash size={18} />\\n      </button>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\\n\"\n    },\n    \"/src/hooks/useLocalStorage.js\": {\n      \"code\": \"import { useState, useEffect } from 'react';\\n\\nfunction useLocalStorage(key, initialValue) {\\n  // Get from local storage then\\n  // parse stored json or return initialValue\\n  const readValue = () => {\\n    // Prevent build errors \\\"window is not defined\\\" But ensure running client side\\n    if (typeof window === 'undefined') {\\n      return initialValue;\\n    }\\n\\n    try {\\n      const item = window.localStorage.getItem(key);\\n      return item ? JSON.parse(item) : initialValue;\\n    } catch (error) {\\n      console.warn(`Error reading localStorage key \\\"${key}\\\":`, error);\\n      return initialValue;\\n    }\\n  };\\n\\n  // State to store our value\\n  // Pass initial state function to useState so logic is only executed once\\n  const [storedValue, setStoredValue] = useState(readValue);\\n\\n  // Return a wrapped version of useState's setter function that ...\\n  // ... persists the new value to localStorage.\\n  const setValue = (value) => {\\n    // Prevent build errors \\\"window is not defined\\\" But ensure running client side\\n     if (typeof window == 'undefined') {\\n      console.warn(\\n        `Tried setting localStorage key \\\"${key}\\\" even though environment is not a client`\\n      );\\n    }\\n\\n    try {\\n      // Allow value to be a function so we have same API as useState\\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\\n      // Save state\\n      setStoredValue(valueToStore);\\n      // Save to local storage\\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\\n    } catch (error) {\\n      console.warn(`Error setting localStorage key \\\"${key}\\\":`, error);\\n    }\\n  };\\n\\n  // Read local storage when component mounts\\n  useEffect(() => {\\n    setStoredValue(readValue());\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []); \\n\\n  useEffect(() => {\\n    const handleStorageChange = (event) => {\\n        if (event.key === key) {\\n           setStoredValue(readValue());\\n        }\\n    };\\n    window.addEventListener('storage', handleStorageChange);\\n    return () => window.removeEventListener('storage', handleStorageChange);\\n     // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);\\n\\n  return [storedValue, setValue];\\n}\\n\\nexport default useLocalStorage;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/public/index.html\",\n    \"/index.css\",\n    \"/tailwind.config.js\",\n    \"/postcss.config.js\",\n    \"/vite.config.js\",\n    \"/package.json\",\n    \"/App.js\",\n    \"/src/main.jsx\",\n    \"/src/components/Header.jsx\",\n    \"/src/components/AddTodoForm.jsx\",\n    \"/src/components/TodoList.jsx\",\n    \"/src/components/TodoItem.jsx\",\n    \"/src/hooks/useLocalStorage.js\"\n  ]\n}\n```"},
            ],
        },
    ],
})

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// TODO: Following code needs to be updated for client-side apps.
// const candidates = result.response.candidates;
// for (let candidate_index = 0; candidate_index < candidates.length; candidate_index++) {
//     for (let part_index = 0; part_index < candidates[candidate_index].content.parts.length; part_index++) {
//         const part = candidates[candidate_index].content.parts[part_index];
//         if (part.inlineData) {
//             try {
//                 const filename = `output_${candidate_index}_${part_index}.${mime.extension(part.inlineData.mimeType)}`;
//                 fs.writeFileSync(filename, Buffer.from(part.inlineData.data, 'base64'));
//                 console.log(`Output written to: ${filename}`);
//             } catch (err) {
//                 console.error(err);
//             }
//         }
//     }
// }
// console.log(result.response.text());

